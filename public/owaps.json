[
	{
		"risks":"Injection",
		"summary":" Injection flaws, such as SQL, NoSQL, OS, and LDAP injection, occur when untrusted data is sent to an interpreter as part of a command or query. The attacker’s hostile data can trick the interpreter into executing unintended commands or accessing data without proper authorization.",
		"exploitability": "3",
		"exploitability_info": "Almost any source of data can be an injection vector, environment variables, parameters, external and internal web services, and all types of users. Injection flaws occur when an attacker can send hostile data to an interpreter",
		"detectability": "3",
		"detectability_info":"Injection flaws are very prevalent, particularly in legacy code. Injection vulnerabilities are often found in SQL, LDAP, XPath, or NoSQL queries, OS commands, XML parsers, SMTP headers, expression languages, and ORM queries. Injection flaws are easy to discover when examining code. Scanners and fuzzers can help attackers find injection flaws.",
		"technical": "3",
		"technical_info": "Injection can result in data loss, corruption, or disclosure to unauthorized parties, loss of accountability, or denial of access. Injection can sometimes lead to complete host takeover.The business impact depends on the needs of the application and data.",
		"application_vulnerable": ["An application is vulnerable to attack when:"," User-supplied data is not validated, filtered, or sanitized by the application. "," Dynamic queries or non-parameterized calls without context-aware escaping are used directly in the interpreter.","Hostile data is used within object-relational mapping (ORM) search parameters to extract additional, sensitive records. "," Hostile data is directly used or concatenated, such that the SQL or command contains both structure and hostile data in dynamic queries, commands, or stored procedures."," Some of the more common injections are SQL, NoSQL, OS command, Object Relational Mapping (ORM), LDAP, and Expression Language (EL) or Object Graph Navigation Library (OGNL) injection. The concept is identical among all interpreters. Source code review is the best method of detecting if applications are vulnerable to injections, closely followed by thorough automated testing of all parameters, headers, URL, cookies, JSON, SOAP, and XML data inputs. Organizations can include static source SAST and dynamic application test DAST tools into the CI/CD pipeline to identify newly introduced injection flaws prior to production deployment."],
		"prevent":["Preventing injection requires keeping data separate from commands and queries."," The preferred option is to use a safe API, which avoids the use of the interpreter entirely or provides a parameterized interface, or migrate to use Object Relational Mapping Tools (ORMs).","Note: Even when parameterized, stored procedures can still introduce SQL injection if PL/SQL or T-SQL concatenates queries and data, or executes hostile data with EXECUTE IMMEDIATE or exec(). "," Use positive or “whitelist” server-side input validation. This is not a complete defense as many applications require special characters, such as text areas or APIs for mobile applications. "," For any residual dynamic queries, escape special characters using the specific escape syntax for that interpreter. "," Note: SQL structure such as table names, column names, and so on cannot be escaped, and thus user-supplied structure names are dangerous. This is a common issue in report-writing software. "," Use LIMIT and other SQL controls within queries to prevent mass disclosure of records in case of SQL injection."],
		"attack":["Scenario #1: An application uses untrusted data in the construction of the following vulnerable SQL call:","String query = 'SELECT * FROM accounts WHERE custID='request.getParameter('id')' "," Scenario #2: Similarly, an application’s blind trust in frameworks may result in queries that are still vulnerable, (e.g. Hibernate Query Language (HQL))","Query HQLQuery = session.createQuery('FROM accounts WHERE custID='request.getParameter('id') ')"," In both cases, the attacker modifies the ‘id’ parameter value in their browser to send: ‘ or ‘1’=’1. For example","http://example.com/app/accountView?id=' or '1'='1 ","This changes the meaning of both queries to return all the records from the accounts table. More dangerous attacks could modify or delete data, or even invoke stored procedures."],
		"url": ["https://owasp.org/www-project-proactive-controls/v3/en/c3-secure-database","https://owasp.org/www-project-application-security-verification-standard","https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05-Testing_for_SQL_Injection","https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet.html","https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html","https://cheatsheetseries.owasp.org/cheatsheets/Injection_Prevention_Cheat_Sheet_in_Java.html"]
	},{
		"risks":"Broken Authentication",
		"summary":"Application functions related to authentication and session management are often implemented incorrectly, allowing attackers to compromise passwords, keys, or session tokens, or to exploit other implementation flaws to assume other users’ identities temporarily or permanently.",
		"exploitability": "3",
		"exploitability_info": "Attackers have access to hundreds of millions of valid username and password combinations for credential stuffing, default administrative account lists, automated brute force, and dictionary attack tools. Session management attacks are well understood, particularly in relation to unexpired session tokens.",
		"detectability": "2",
		"detectability_info":"The prevalence of broken authentication is widespread due to the design and implementation of most identity and access controls. Session management is the bedrock of authentication and access controls, and is present in all stateful applications. Attackers can detect broken authentication using manual means and exploit them using automated tools with password lists and dictionary attacks.",
		"technical": "3",
		"technical_info": "Attackers have to gain access to only a few accounts, or just one admin account to compromise the system. Depending on the domain of the application, this may allow money laundering, social security fraud, and identity theft, or disclose legally protected highly sensitive information.",
		"application_vulnerable": ["Confirmation of the user’s identity, authentication, and session management are critical to protect against authentication-related attacks. There may be authentication weaknesses if the application:"," Permits automated attacks such as credential stuffing, where the attacker has a list of valid usernames and passwords.","Uses weak or ineffective credential recovery and forgot-password processes, such as “knowledge-based answers”, which cannot be made safe.","Has missing or ineffective multi-factor authentication.","Does not properly invalidate Session IDs. User sessions or authentication tokens (particularly single sign-on (SSO) tokens) aren’t properly invalidated during logout or a period of inactivity."],
		"prevent":["Where possible, implement multi-factor authentication to prevent automated, credential stuffing, brute force, and stolen credential re-use attacks.","Implement weak-password checks, such as testing new or changed passwords against a list of the top 10000 worst passwords.","Ensure registration, credential recovery, and API pathways are hardened against account enumeration attacks by using the same messages for all outcomes."," Limit or increasingly delay failed login attempts. Log all failures and alert administrators when credential stuffing, brute force, or other attacks are detected. ","Use a server-side, secure, built-in session manager that generates a new random session ID with high entropy after login. Session IDs should not be in the URL, be securely stored and invalidated after logout, idle, and absolute timeouts."],
		"attack":["Scenario #1: Credential stuffing, the use of lists of known passwords, is a common attack. If an application does not implement automated threat or credential stuffing protections, the application can be used as a password oracle to determine if the credentials are valid.","Scenario #2: Most authentication attacks occur due to the continued use of passwords as a sole factor. Once considered best practices, password rotation and complexity requirements are viewed as encouraging users to use, and reuse, weak passwords. Organizations are recommended to stop these practices per NIST 800-63 and use multi-factor authentication."," Scenario #3: Application session timeouts aren’t set properly. A user uses a public computer to access an application. Instead of selecting “logout” the user simply closes the browser tab and walks away. An attacker uses the same browser an hour later, and the user is still authenticated."],
		"url": ["https://owasp.org/www-project-proactive-controls/v3/en/c6-digital-identity","https://owasp.org/www-project-application-security-verification-standard/","https://owasp.org/www-project-application-security-verification-standard/","https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/README","https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html","https://owasp.org/www-project-automated-threats-to-web-applications/"]
	},{
		"risks":"Sensitive Data Exposure",
		"summary":"Application functions related to authentication and session management are often implemented incorrectly, allowing attackers to compromise passwords, keys, or session tokens, or to exploit other implementation flaws to assume other users’ identities temporarily or permanently.",
		"exploitability": "3",
		"exploitability_info": "Attackers have access to hundreds of millions of valid username and password combinations for credential stuffing, default administrative account lists, automated brute force, and dictionary attack tools. Session management attacks are well understood, particularly in relation to unexpired session tokens.",
		"detectability": "2",
		"detectability_info":"The prevalence of broken authentication is widespread due to the design and implementation of most identity and access controls. Session management is the bedrock of authentication and access controls, and is present in all stateful applications. Attackers can detect broken authentication using manual means and exploit them using automated tools with password lists and dictionary attacks.",
		"technical": "3",
		"technical_info": "Attackers have to gain access to only a few accounts, or just one admin account to compromise the system. Depending on the domain of the application, this may allow money laundering, social security fraud, and identity theft, or disclose legally protected highly sensitive information.",
		"application_vulnerable": ["Confirmation of the user’s identity, authentication, and session management are critical to protect against authentication-related attacks. There may be authentication weaknesses if the application:"," Permits automated attacks such as credential stuffing, where the attacker has a list of valid usernames and passwords.","Uses weak or ineffective credential recovery and forgot-password processes, such as “knowledge-based answers”, which cannot be made safe.","Has missing or ineffective multi-factor authentication.","Does not properly invalidate Session IDs. User sessions or authentication tokens (particularly single sign-on (SSO) tokens) aren’t properly invalidated during logout or a period of inactivity."],
		"prevent":["Where possible, implement multi-factor authentication to prevent automated, credential stuffing, brute force, and stolen credential re-use attacks.","Implement weak-password checks, such as testing new or changed passwords against a list of the top 10000 worst passwords.","Ensure registration, credential recovery, and API pathways are hardened against account enumeration attacks by using the same messages for all outcomes."," Limit or increasingly delay failed login attempts. Log all failures and alert administrators when credential stuffing, brute force, or other attacks are detected. ","Use a server-side, secure, built-in session manager that generates a new random session ID with high entropy after login. Session IDs should not be in the URL, be securely stored and invalidated after logout, idle, and absolute timeouts."],
		"attack":["Scenario #1: Credential stuffing, the use of lists of known passwords, is a common attack. If an application does not implement automated threat or credential stuffing protections, the application can be used as a password oracle to determine if the credentials are valid.","Scenario #2: Most authentication attacks occur due to the continued use of passwords as a sole factor. Once considered best practices, password rotation and complexity requirements are viewed as encouraging users to use, and reuse, weak passwords. Organizations are recommended to stop these practices per NIST 800-63 and use multi-factor authentication."," Scenario #3: Application session timeouts aren’t set properly. A user uses a public computer to access an application. Instead of selecting “logout” the user simply closes the browser tab and walks away. An attacker uses the same browser an hour later, and the user is still authenticated."],
		"url": ["https://owasp.org/www-project-proactive-controls/v3/en/c6-digital-identity","https://owasp.org/www-project-application-security-verification-standard/","https://owasp.org/www-project-application-security-verification-standard/","https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/README","https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html","https://owasp.org/www-project-automated-threats-to-web-applications/"]
	},{
		"risks":"XML External Entities (XXE)",
		"summary":"Application functions related to authentication and session management are often implemented incorrectly, allowing attackers to compromise passwords, keys, or session tokens, or to exploit other implementation flaws to assume other users’ identities temporarily or permanently.",
		"exploitability": "3",
		"exploitability_info": "Attackers have access to hundreds of millions of valid username and password combinations for credential stuffing, default administrative account lists, automated brute force, and dictionary attack tools. Session management attacks are well understood, particularly in relation to unexpired session tokens.",
		"detectability": "2",
		"detectability_info":"The prevalence of broken authentication is widespread due to the design and implementation of most identity and access controls. Session management is the bedrock of authentication and access controls, and is present in all stateful applications. Attackers can detect broken authentication using manual means and exploit them using automated tools with password lists and dictionary attacks.",
		"technical": "3",
		"technical_info": "Attackers have to gain access to only a few accounts, or just one admin account to compromise the system. Depending on the domain of the application, this may allow money laundering, social security fraud, and identity theft, or disclose legally protected highly sensitive information.",
		"application_vulnerable": ["Confirmation of the user’s identity, authentication, and session management are critical to protect against authentication-related attacks. There may be authentication weaknesses if the application:"," Permits automated attacks such as credential stuffing, where the attacker has a list of valid usernames and passwords.","Uses weak or ineffective credential recovery and forgot-password processes, such as “knowledge-based answers”, which cannot be made safe.","Has missing or ineffective multi-factor authentication.","Does not properly invalidate Session IDs. User sessions or authentication tokens (particularly single sign-on (SSO) tokens) aren’t properly invalidated during logout or a period of inactivity."],
		"prevent":["Where possible, implement multi-factor authentication to prevent automated, credential stuffing, brute force, and stolen credential re-use attacks.","Implement weak-password checks, such as testing new or changed passwords against a list of the top 10000 worst passwords.","Ensure registration, credential recovery, and API pathways are hardened against account enumeration attacks by using the same messages for all outcomes."," Limit or increasingly delay failed login attempts. Log all failures and alert administrators when credential stuffing, brute force, or other attacks are detected. ","Use a server-side, secure, built-in session manager that generates a new random session ID with high entropy after login. Session IDs should not be in the URL, be securely stored and invalidated after logout, idle, and absolute timeouts."],
		"attack":["Scenario #1: Credential stuffing, the use of lists of known passwords, is a common attack. If an application does not implement automated threat or credential stuffing protections, the application can be used as a password oracle to determine if the credentials are valid.","Scenario #2: Most authentication attacks occur due to the continued use of passwords as a sole factor. Once considered best practices, password rotation and complexity requirements are viewed as encouraging users to use, and reuse, weak passwords. Organizations are recommended to stop these practices per NIST 800-63 and use multi-factor authentication."," Scenario #3: Application session timeouts aren’t set properly. A user uses a public computer to access an application. Instead of selecting “logout” the user simply closes the browser tab and walks away. An attacker uses the same browser an hour later, and the user is still authenticated."],
		"url": ["https://owasp.org/www-project-proactive-controls/v3/en/c6-digital-identity","https://owasp.org/www-project-application-security-verification-standard/","https://owasp.org/www-project-application-security-verification-standard/","https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/README","https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html","https://owasp.org/www-project-automated-threats-to-web-applications/"]
	},{
		"risks":"Broken Access Control",
		"summary":"Application functions related to authentication and session management are often implemented incorrectly, allowing attackers to compromise passwords, keys, or session tokens, or to exploit other implementation flaws to assume other users’ identities temporarily or permanently.",
		"exploitability": "3",
		"exploitability_info": "Attackers have access to hundreds of millions of valid username and password combinations for credential stuffing, default administrative account lists, automated brute force, and dictionary attack tools. Session management attacks are well understood, particularly in relation to unexpired session tokens.",
		"detectability": "2",
		"detectability_info":"The prevalence of broken authentication is widespread due to the design and implementation of most identity and access controls. Session management is the bedrock of authentication and access controls, and is present in all stateful applications. Attackers can detect broken authentication using manual means and exploit them using automated tools with password lists and dictionary attacks.",
		"technical": "3",
		"technical_info": "Attackers have to gain access to only a few accounts, or just one admin account to compromise the system. Depending on the domain of the application, this may allow money laundering, social security fraud, and identity theft, or disclose legally protected highly sensitive information.",
		"application_vulnerable": ["Confirmation of the user’s identity, authentication, and session management are critical to protect against authentication-related attacks. There may be authentication weaknesses if the application:"," Permits automated attacks such as credential stuffing, where the attacker has a list of valid usernames and passwords.","Uses weak or ineffective credential recovery and forgot-password processes, such as “knowledge-based answers”, which cannot be made safe.","Has missing or ineffective multi-factor authentication.","Does not properly invalidate Session IDs. User sessions or authentication tokens (particularly single sign-on (SSO) tokens) aren’t properly invalidated during logout or a period of inactivity."],
		"prevent":["Where possible, implement multi-factor authentication to prevent automated, credential stuffing, brute force, and stolen credential re-use attacks.","Implement weak-password checks, such as testing new or changed passwords against a list of the top 10000 worst passwords.","Ensure registration, credential recovery, and API pathways are hardened against account enumeration attacks by using the same messages for all outcomes."," Limit or increasingly delay failed login attempts. Log all failures and alert administrators when credential stuffing, brute force, or other attacks are detected. ","Use a server-side, secure, built-in session manager that generates a new random session ID with high entropy after login. Session IDs should not be in the URL, be securely stored and invalidated after logout, idle, and absolute timeouts."],
		"attack":["Scenario #1: Credential stuffing, the use of lists of known passwords, is a common attack. If an application does not implement automated threat or credential stuffing protections, the application can be used as a password oracle to determine if the credentials are valid.","Scenario #2: Most authentication attacks occur due to the continued use of passwords as a sole factor. Once considered best practices, password rotation and complexity requirements are viewed as encouraging users to use, and reuse, weak passwords. Organizations are recommended to stop these practices per NIST 800-63 and use multi-factor authentication."," Scenario #3: Application session timeouts aren’t set properly. A user uses a public computer to access an application. Instead of selecting “logout” the user simply closes the browser tab and walks away. An attacker uses the same browser an hour later, and the user is still authenticated."],
		"url": ["https://owasp.org/www-project-proactive-controls/v3/en/c6-digital-identity","https://owasp.org/www-project-application-security-verification-standard/","https://owasp.org/www-project-application-security-verification-standard/","https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/README","https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html","https://owasp.org/www-project-automated-threats-to-web-applications/"]
	},{
		"risks":"Security Misconfiguration",
		"summary":"Application functions related to authentication and session management are often implemented incorrectly, allowing attackers to compromise passwords, keys, or session tokens, or to exploit other implementation flaws to assume other users’ identities temporarily or permanently.",
		"exploitability": "3",
		"exploitability_info": "Attackers have access to hundreds of millions of valid username and password combinations for credential stuffing, default administrative account lists, automated brute force, and dictionary attack tools. Session management attacks are well understood, particularly in relation to unexpired session tokens.",
		"detectability": "2",
		"detectability_info":"The prevalence of broken authentication is widespread due to the design and implementation of most identity and access controls. Session management is the bedrock of authentication and access controls, and is present in all stateful applications. Attackers can detect broken authentication using manual means and exploit them using automated tools with password lists and dictionary attacks.",
		"technical": "3",
		"technical_info": "Attackers have to gain access to only a few accounts, or just one admin account to compromise the system. Depending on the domain of the application, this may allow money laundering, social security fraud, and identity theft, or disclose legally protected highly sensitive information.",
		"application_vulnerable": ["Confirmation of the user’s identity, authentication, and session management are critical to protect against authentication-related attacks. There may be authentication weaknesses if the application:"," Permits automated attacks such as credential stuffing, where the attacker has a list of valid usernames and passwords.","Uses weak or ineffective credential recovery and forgot-password processes, such as “knowledge-based answers”, which cannot be made safe.","Has missing or ineffective multi-factor authentication.","Does not properly invalidate Session IDs. User sessions or authentication tokens (particularly single sign-on (SSO) tokens) aren’t properly invalidated during logout or a period of inactivity."],
		"prevent":["Where possible, implement multi-factor authentication to prevent automated, credential stuffing, brute force, and stolen credential re-use attacks.","Implement weak-password checks, such as testing new or changed passwords against a list of the top 10000 worst passwords.","Ensure registration, credential recovery, and API pathways are hardened against account enumeration attacks by using the same messages for all outcomes."," Limit or increasingly delay failed login attempts. Log all failures and alert administrators when credential stuffing, brute force, or other attacks are detected. ","Use a server-side, secure, built-in session manager that generates a new random session ID with high entropy after login. Session IDs should not be in the URL, be securely stored and invalidated after logout, idle, and absolute timeouts."],
		"attack":["Scenario #1: Credential stuffing, the use of lists of known passwords, is a common attack. If an application does not implement automated threat or credential stuffing protections, the application can be used as a password oracle to determine if the credentials are valid.","Scenario #2: Most authentication attacks occur due to the continued use of passwords as a sole factor. Once considered best practices, password rotation and complexity requirements are viewed as encouraging users to use, and reuse, weak passwords. Organizations are recommended to stop these practices per NIST 800-63 and use multi-factor authentication."," Scenario #3: Application session timeouts aren’t set properly. A user uses a public computer to access an application. Instead of selecting “logout” the user simply closes the browser tab and walks away. An attacker uses the same browser an hour later, and the user is still authenticated."],
		"url": ["https://owasp.org/www-project-proactive-controls/v3/en/c6-digital-identity","https://owasp.org/www-project-application-security-verification-standard/","https://owasp.org/www-project-application-security-verification-standard/","https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/README","https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html","https://owasp.org/www-project-automated-threats-to-web-applications/"]
	},{
		"risks":"Cross-Site Scripting XSS",
		"summary":"Application functions related to authentication and session management are often implemented incorrectly, allowing attackers to compromise passwords, keys, or session tokens, or to exploit other implementation flaws to assume other users’ identities temporarily or permanently.",
		"exploitability": "3",
		"exploitability_info": "Attackers have access to hundreds of millions of valid username and password combinations for credential stuffing, default administrative account lists, automated brute force, and dictionary attack tools. Session management attacks are well understood, particularly in relation to unexpired session tokens.",
		"detectability": "2",
		"detectability_info":"The prevalence of broken authentication is widespread due to the design and implementation of most identity and access controls. Session management is the bedrock of authentication and access controls, and is present in all stateful applications. Attackers can detect broken authentication using manual means and exploit them using automated tools with password lists and dictionary attacks.",
		"technical": "3",
		"technical_info": "Attackers have to gain access to only a few accounts, or just one admin account to compromise the system. Depending on the domain of the application, this may allow money laundering, social security fraud, and identity theft, or disclose legally protected highly sensitive information.",
		"application_vulnerable": ["Confirmation of the user’s identity, authentication, and session management are critical to protect against authentication-related attacks. There may be authentication weaknesses if the application:"," Permits automated attacks such as credential stuffing, where the attacker has a list of valid usernames and passwords.","Uses weak or ineffective credential recovery and forgot-password processes, such as “knowledge-based answers”, which cannot be made safe.","Has missing or ineffective multi-factor authentication.","Does not properly invalidate Session IDs. User sessions or authentication tokens (particularly single sign-on (SSO) tokens) aren’t properly invalidated during logout or a period of inactivity."],
		"prevent":["Where possible, implement multi-factor authentication to prevent automated, credential stuffing, brute force, and stolen credential re-use attacks.","Implement weak-password checks, such as testing new or changed passwords against a list of the top 10000 worst passwords.","Ensure registration, credential recovery, and API pathways are hardened against account enumeration attacks by using the same messages for all outcomes."," Limit or increasingly delay failed login attempts. Log all failures and alert administrators when credential stuffing, brute force, or other attacks are detected. ","Use a server-side, secure, built-in session manager that generates a new random session ID with high entropy after login. Session IDs should not be in the URL, be securely stored and invalidated after logout, idle, and absolute timeouts."],
		"attack":["Scenario #1: Credential stuffing, the use of lists of known passwords, is a common attack. If an application does not implement automated threat or credential stuffing protections, the application can be used as a password oracle to determine if the credentials are valid.","Scenario #2: Most authentication attacks occur due to the continued use of passwords as a sole factor. Once considered best practices, password rotation and complexity requirements are viewed as encouraging users to use, and reuse, weak passwords. Organizations are recommended to stop these practices per NIST 800-63 and use multi-factor authentication."," Scenario #3: Application session timeouts aren’t set properly. A user uses a public computer to access an application. Instead of selecting “logout” the user simply closes the browser tab and walks away. An attacker uses the same browser an hour later, and the user is still authenticated."],
		"url": ["https://owasp.org/www-project-proactive-controls/v3/en/c6-digital-identity","https://owasp.org/www-project-application-security-verification-standard/","https://owasp.org/www-project-application-security-verification-standard/","https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/README","https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html","https://owasp.org/www-project-automated-threats-to-web-applications/"]
	},{
		"risks":"Insecure Deserialization",
		"summary":"Application functions related to authentication and session management are often implemented incorrectly, allowing attackers to compromise passwords, keys, or session tokens, or to exploit other implementation flaws to assume other users’ identities temporarily or permanently.",
		"exploitability": "3",
		"exploitability_info": "Attackers have access to hundreds of millions of valid username and password combinations for credential stuffing, default administrative account lists, automated brute force, and dictionary attack tools. Session management attacks are well understood, particularly in relation to unexpired session tokens.",
		"detectability": "2",
		"detectability_info":"The prevalence of broken authentication is widespread due to the design and implementation of most identity and access controls. Session management is the bedrock of authentication and access controls, and is present in all stateful applications. Attackers can detect broken authentication using manual means and exploit them using automated tools with password lists and dictionary attacks.",
		"technical": "3",
		"technical_info": "Attackers have to gain access to only a few accounts, or just one admin account to compromise the system. Depending on the domain of the application, this may allow money laundering, social security fraud, and identity theft, or disclose legally protected highly sensitive information.",
		"application_vulnerable": ["Confirmation of the user’s identity, authentication, and session management are critical to protect against authentication-related attacks. There may be authentication weaknesses if the application:"," Permits automated attacks such as credential stuffing, where the attacker has a list of valid usernames and passwords.","Uses weak or ineffective credential recovery and forgot-password processes, such as “knowledge-based answers”, which cannot be made safe.","Has missing or ineffective multi-factor authentication.","Does not properly invalidate Session IDs. User sessions or authentication tokens (particularly single sign-on (SSO) tokens) aren’t properly invalidated during logout or a period of inactivity."],
		"prevent":["Where possible, implement multi-factor authentication to prevent automated, credential stuffing, brute force, and stolen credential re-use attacks.","Implement weak-password checks, such as testing new or changed passwords against a list of the top 10000 worst passwords.","Ensure registration, credential recovery, and API pathways are hardened against account enumeration attacks by using the same messages for all outcomes."," Limit or increasingly delay failed login attempts. Log all failures and alert administrators when credential stuffing, brute force, or other attacks are detected. ","Use a server-side, secure, built-in session manager that generates a new random session ID with high entropy after login. Session IDs should not be in the URL, be securely stored and invalidated after logout, idle, and absolute timeouts."],
		"attack":["Scenario #1: Credential stuffing, the use of lists of known passwords, is a common attack. If an application does not implement automated threat or credential stuffing protections, the application can be used as a password oracle to determine if the credentials are valid.","Scenario #2: Most authentication attacks occur due to the continued use of passwords as a sole factor. Once considered best practices, password rotation and complexity requirements are viewed as encouraging users to use, and reuse, weak passwords. Organizations are recommended to stop these practices per NIST 800-63 and use multi-factor authentication."," Scenario #3: Application session timeouts aren’t set properly. A user uses a public computer to access an application. Instead of selecting “logout” the user simply closes the browser tab and walks away. An attacker uses the same browser an hour later, and the user is still authenticated."],
		"url": ["https://owasp.org/www-project-proactive-controls/v3/en/c6-digital-identity","https://owasp.org/www-project-application-security-verification-standard/","https://owasp.org/www-project-application-security-verification-standard/","https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/README","https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html","https://owasp.org/www-project-automated-threats-to-web-applications/"]
	},{
		"risks":"Using Components with Known Vulnerabilities",
		"summary":"Application functions related to authentication and session management are often implemented incorrectly, allowing attackers to compromise passwords, keys, or session tokens, or to exploit other implementation flaws to assume other users’ identities temporarily or permanently.",
		"exploitability": "3",
		"exploitability_info": "Attackers have access to hundreds of millions of valid username and password combinations for credential stuffing, default administrative account lists, automated brute force, and dictionary attack tools. Session management attacks are well understood, particularly in relation to unexpired session tokens.",
		"detectability": "2",
		"detectability_info":"The prevalence of broken authentication is widespread due to the design and implementation of most identity and access controls. Session management is the bedrock of authentication and access controls, and is present in all stateful applications. Attackers can detect broken authentication using manual means and exploit them using automated tools with password lists and dictionary attacks.",
		"technical": "3",
		"technical_info": "Attackers have to gain access to only a few accounts, or just one admin account to compromise the system. Depending on the domain of the application, this may allow money laundering, social security fraud, and identity theft, or disclose legally protected highly sensitive information.",
		"application_vulnerable": ["Confirmation of the user’s identity, authentication, and session management are critical to protect against authentication-related attacks. There may be authentication weaknesses if the application:"," Permits automated attacks such as credential stuffing, where the attacker has a list of valid usernames and passwords.","Uses weak or ineffective credential recovery and forgot-password processes, such as “knowledge-based answers”, which cannot be made safe.","Has missing or ineffective multi-factor authentication.","Does not properly invalidate Session IDs. User sessions or authentication tokens (particularly single sign-on (SSO) tokens) aren’t properly invalidated during logout or a period of inactivity."],
		"prevent":["Where possible, implement multi-factor authentication to prevent automated, credential stuffing, brute force, and stolen credential re-use attacks.","Implement weak-password checks, such as testing new or changed passwords against a list of the top 10000 worst passwords.","Ensure registration, credential recovery, and API pathways are hardened against account enumeration attacks by using the same messages for all outcomes."," Limit or increasingly delay failed login attempts. Log all failures and alert administrators when credential stuffing, brute force, or other attacks are detected. ","Use a server-side, secure, built-in session manager that generates a new random session ID with high entropy after login. Session IDs should not be in the URL, be securely stored and invalidated after logout, idle, and absolute timeouts."],
		"attack":["Scenario #1: Credential stuffing, the use of lists of known passwords, is a common attack. If an application does not implement automated threat or credential stuffing protections, the application can be used as a password oracle to determine if the credentials are valid.","Scenario #2: Most authentication attacks occur due to the continued use of passwords as a sole factor. Once considered best practices, password rotation and complexity requirements are viewed as encouraging users to use, and reuse, weak passwords. Organizations are recommended to stop these practices per NIST 800-63 and use multi-factor authentication."," Scenario #3: Application session timeouts aren’t set properly. A user uses a public computer to access an application. Instead of selecting “logout” the user simply closes the browser tab and walks away. An attacker uses the same browser an hour later, and the user is still authenticated."],
		"url": ["https://owasp.org/www-project-proactive-controls/v3/en/c6-digital-identity","https://owasp.org/www-project-application-security-verification-standard/","https://owasp.org/www-project-application-security-verification-standard/","https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/README","https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html","https://owasp.org/www-project-automated-threats-to-web-applications/"]
	},{
		"risks":"Insufficient Logging & Monitoring",
		"summary":"Application functions related to authentication and session management are often implemented incorrectly, allowing attackers to compromise passwords, keys, or session tokens, or to exploit other implementation flaws to assume other users’ identities temporarily or permanently.",
		"exploitability": "3",
		"exploitability_info": "Attackers have access to hundreds of millions of valid username and password combinations for credential stuffing, default administrative account lists, automated brute force, and dictionary attack tools. Session management attacks are well understood, particularly in relation to unexpired session tokens.",
		"detectability": "2",
		"detectability_info":"The prevalence of broken authentication is widespread due to the design and implementation of most identity and access controls. Session management is the bedrock of authentication and access controls, and is present in all stateful applications. Attackers can detect broken authentication using manual means and exploit them using automated tools with password lists and dictionary attacks.",
		"technical": "3",
		"technical_info": "Attackers have to gain access to only a few accounts, or just one admin account to compromise the system. Depending on the domain of the application, this may allow money laundering, social security fraud, and identity theft, or disclose legally protected highly sensitive information.",
		"application_vulnerable": ["Confirmation of the user’s identity, authentication, and session management are critical to protect against authentication-related attacks. There may be authentication weaknesses if the application:"," Permits automated attacks such as credential stuffing, where the attacker has a list of valid usernames and passwords.","Uses weak or ineffective credential recovery and forgot-password processes, such as “knowledge-based answers”, which cannot be made safe.","Has missing or ineffective multi-factor authentication.","Does not properly invalidate Session IDs. User sessions or authentication tokens (particularly single sign-on (SSO) tokens) aren’t properly invalidated during logout or a period of inactivity."],
		"prevent":["Where possible, implement multi-factor authentication to prevent automated, credential stuffing, brute force, and stolen credential re-use attacks.","Implement weak-password checks, such as testing new or changed passwords against a list of the top 10000 worst passwords.","Ensure registration, credential recovery, and API pathways are hardened against account enumeration attacks by using the same messages for all outcomes."," Limit or increasingly delay failed login attempts. Log all failures and alert administrators when credential stuffing, brute force, or other attacks are detected. ","Use a server-side, secure, built-in session manager that generates a new random session ID with high entropy after login. Session IDs should not be in the URL, be securely stored and invalidated after logout, idle, and absolute timeouts."],
		"attack":["Scenario #1: Credential stuffing, the use of lists of known passwords, is a common attack. If an application does not implement automated threat or credential stuffing protections, the application can be used as a password oracle to determine if the credentials are valid.","Scenario #2: Most authentication attacks occur due to the continued use of passwords as a sole factor. Once considered best practices, password rotation and complexity requirements are viewed as encouraging users to use, and reuse, weak passwords. Organizations are recommended to stop these practices per NIST 800-63 and use multi-factor authentication."," Scenario #3: Application session timeouts aren’t set properly. A user uses a public computer to access an application. Instead of selecting “logout” the user simply closes the browser tab and walks away. An attacker uses the same browser an hour later, and the user is still authenticated."],
		"url": ["https://owasp.org/www-project-proactive-controls/v3/en/c6-digital-identity","https://owasp.org/www-project-application-security-verification-standard/","https://owasp.org/www-project-application-security-verification-standard/","https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/README","https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html","https://owasp.org/www-project-automated-threats-to-web-applications/"]
	}
]